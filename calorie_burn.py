# -*- coding: utf-8 -*-
"""calorie_burn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/117fVraFDVzvrrBYQuf14mS9yC56ZJ04p
"""

import streamlit as st
import pandas as pd
import xgboost as xgb
import pickle

# Load your saved XGBoost model
@st.cache_resource
def load_model():
    try:
        model = pickle.load(open('finalized_model.pkl', 'rb'))
        return model
    except FileNotFoundError:
        st.error("Model file not found. Please ensure 'finalized_model.pkl' is in the same directory.")
        return None
    except Exception as e:
        st.error(f"Error loading model: {e}")
        return None

model = load_model()

st.title('Calorie Expenditure Prediction')
st.write('Predict calories burned based on exercise metrics')

# Input form
with st.form('input_form'):
    st.header('User Information')

    gender = st.radio('Gender', ['male', 'female'])
    age = st.number_input('Age', min_value=10, max_value=100, value=30)
    height = st.number_input('Height (cm)', min_value=100.0, max_value=250.0, value=170.0)
    weight = st.number_input('Weight (kg)', min_value=30.0, max_value=200.0, value=70.0)

    st.header('Exercise Metrics')
    duration = st.number_input('Duration (minutes)', min_value=1.0, max_value=300.0, value=30.0)
    heart_rate = st.number_input('Heart Rate (bpm)', min_value=50.0, max_value=200.0, value=100.0)
    body_temp = st.number_input('Body Temperature (Â°C)', min_value=35.0, max_value=43.0, value=37.0)

    submitted = st.form_submit_button('Predict Calories')

if submitted and model is not None:
    try:
        # Prepare input data
        input_data = pd.DataFrame({
            'User_ID': [0],  # Dummy ID
            'Gender': [gender],
            'Age': [age],
            'Height': [height],
            'Weight': [weight],
            'Duration': [duration],
            'Heart_Rate': [heart_rate],
            'Body_Temp': [body_temp]
        })

        # Convert gender to numerical (male=1, female=0)
        input_data['Gender'] = input_data['Gender'].map({'male': 1, 'female': 0})

        # Make prediction (excluding User_ID)
        features = input_data.drop('User_ID', axis=1)
        prediction = model.predict(features)

        st.success(f'Predicted Calories Burned: {prediction[0]:.2f} kcal')

    except Exception as e:
        st.error(f"Error making prediction: {e}")

